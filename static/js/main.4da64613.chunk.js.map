{"version":3,"sources":["components/BarChart.js","App.js","index.js"],"names":["dates","Array","from","Set","tempData","map","date","reverse","minTempC","i","length","station_code","push","temp_min_c","console","log","maxTempC","temp_max_c","Charts","options","color","responsive","layout","padding","left","right","bottom","legend","labels","fontColor","scales","yAxes","gridLines","zeroLineColor","scaleLabel","display","labelString","xAxes","data","datasets","label","backgroundColor","borderColor","borderWidth","App","style","textAlign","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAWIA,EAAQ,IACZA,EAAQC,MAAMC,KAAK,IAAIC,IAAIC,EAASC,KAAI,qBAAGC,WACrCC,UAKN,IADA,IAAIC,EAAW,GACNC,EAAEL,EAASM,OAAO,EAAGD,GAAG,EAAGA,IACC,SAA7BL,EAASK,GAAGE,cACZH,EAASI,KAAKR,EAASK,GAAGI,YAGlCC,QAAQC,IAAIP,GAGZ,IADA,IAAIQ,EAAW,GACNP,EAAEL,EAASM,OAAO,EAAGD,GAAG,EAAGA,IACC,SAA7BL,EAASK,GAAGE,cACZK,EAASJ,KAAKR,EAASK,GAAGQ,YAGlCH,QAAQC,IAAIC,GAIZ,IA8EeE,EA9EA,WACX,OAAO,8BACH,cAAC,OAAD,CACgBC,QAAU,CACFC,MAAO,UACPC,YAAY,EACZC,OAAQ,CACJC,QAAS,CACLC,KAAM,GACNC,MAAO,GACPC,OAAQ,MAGhBC,OAAQ,CACJC,OAAQ,CAEJC,UAAW,YAGnBC,OAAQ,CACJC,MAAO,CAAC,CACNC,UAAW,CACPZ,MAAO,UACPa,cAAe,WAEnBC,WAAY,CACVC,SAAS,EACTC,YAAa,yBACbP,UAAW,aAGfQ,MAAO,CAAC,CACJL,UAAW,CACPZ,MAAO,UACPa,cAAe,WAEnBC,WAAY,CACVC,SAAS,EACTC,YAAa,kCACbP,UAAW,eAM7BS,KAAM,CACFV,OAAQ5B,EACRuC,SAAU,CAAC,CACPC,MAAO,8BACPF,KAAM9B,EACNiC,gBAAiB,CACb,yBAGJC,YAAa,CACT,WAGJC,YAAa,GAEjB,CAACH,MAAO,8BACJF,KAAMtB,EACNyB,gBAAiB,CACb,2BAGJC,YAAa,CACT,yBAGJC,YAAa,UCzF9BC,E,4JAXb,WACE,OACA,8BACC,8BACE,oBAAIC,MAAO,CAACC,UAAW,UAAvB,+BACA,cAAC,EAAD,a,GANWC,IAAMC,WCAxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACG,cAAC,EAAD,MAEHC,SAASC,eAAe,U","file":"static/js/main.4da64613.chunk.js","sourcesContent":["\r\nimport React from 'react'\r\nimport { Line} from 'react-chartjs-2'\r\nimport tempData from \"../TempData.json\"\r\n\r\n/* for (let i=0; i<tempData.length; i++) {\r\n    console.log(tempData[i])\r\n}\r\n */\r\n\r\n// Create a set of the unique dates\r\nlet dates = []\r\ndates = Array.from(new Set(tempData.map(({ date }) => date)))\r\ndates.reverse()\r\n\r\n\r\n\r\nlet minTempC = []\r\nfor (let i=tempData.length-1; i>-1; i--) {\r\n    if (tempData[i].station_code === 'KATL') {\r\n        minTempC.push(tempData[i].temp_min_c)\r\n    }\r\n}\r\nconsole.log(minTempC)\r\n\r\nlet maxTempC = []\r\nfor (let i=tempData.length-1; i>-1; i--) {\r\n    if (tempData[i].station_code === 'KATL') {\r\n        maxTempC.push(tempData[i].temp_max_c)\r\n    }\r\n}\r\nconsole.log(maxTempC)\r\n\r\n\r\n\r\nconst Charts = () => {\r\n    return <div>\r\n        <Line \r\n                        options= {{\r\n                                color: '#b5b5b5',\r\n                                responsive: true,\r\n                                layout: {\r\n                                    padding: {\r\n                                        left: 50,\r\n                                        right: 50,\r\n                                        bottom: 250\r\n                                    }\r\n                                },\r\n                                legend: {\r\n                                    labels: {\r\n                                        // This more specific font property overrides the global property\r\n                                        fontColor: \"#8c8c8c\"\r\n                                    }\r\n                                },\r\n                                scales: {\r\n                                    yAxes: [{\r\n                                      gridLines: {\r\n                                          color: \"#8c8c8c\",\r\n                                          zeroLineColor: '#8c8c8c'\r\n                                      },\r\n                                      scaleLabel: {\r\n                                        display: true,\r\n                                        labelString: 'Temperature in Celsius',\r\n                                        fontColor: \"#b5b5b5\"\r\n                                      }\r\n                                    }],\r\n                                    xAxes: [{\r\n                                        gridLines: {\r\n                                            color: \"#8c8c8c\",\r\n                                            zeroLineColor: '#8c8c8c'\r\n                                        },\r\n                                        scaleLabel: {\r\n                                          display: true,\r\n                                          labelString: 'Date of Temperature Measurement',\r\n                                          fontColor: \"#b5b5b5\"\r\n                                        }\r\n                                      }]\r\n                                  }    \r\n\r\n                        }}\r\n                        data={{\r\n                            labels: dates,\r\n                            datasets: [{\r\n                                label: 'Atlanta Minimum Temperature',\r\n                                data: minTempC,\r\n                                backgroundColor: [\r\n                                    'rgba(0, 82, 153, 0.6)'\r\n                    \r\n                                ],\r\n                                borderColor: [\r\n                                    '#005299'\r\n               \r\n                                ],\r\n                                borderWidth: 2\r\n                            },\r\n                            {label: 'Atlanta Maximum Temperature',\r\n                                data: maxTempC,\r\n                                backgroundColor: [\r\n                                    'rgba(255, 99, 155, 0.2)'\r\n                    \r\n                                ],\r\n                                borderColor: [\r\n                                    'rgba(255, 99, 155, 1)'\r\n               \r\n                                ],\r\n                                borderWidth: 2}\r\n                            ]\r\n                        }}\r\n                        \r\n        />\r\n        </div>\r\n}\r\n\r\nexport default Charts","import React from 'react';\r\nimport './App.css';\r\nimport Charts from './components/BarChart';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n    <div>\r\n     <b>\r\n       <h1 style={{textAlign: \"center\"}}>Temperature Chart</h1>\r\n       <Charts />\r\n     </b>\r\n    </div>\r\n   )\r\n };\r\n}\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n     <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}